<?xml version="1.0" encoding="UTF-8"?>

<!-- Spring namespace-based configuration -->

<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/aop   
		   http://www.springframework.org/schema/aop/spring-aop.xsd                        
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- ====================================================== -->
    <!--      For catching the @Secured annotation methods      -->
    <!--                we use our own mechanism.               -->
    <!--      Look in GFCBaseCtrl.java onEvent() method.        -->
    <!-- ====================================================== -->

    <!-- Enable the @Secured annotation to secure service layer methods -->
    <global-method-security secured-annotations="disabled"/>

    <http>

        <!-- ====================================================== -->
        <!--       If we have our own LoginPage. So we must         -->
        <!--         tell Spring the name and the place.            -->
        <!--          In our case we take the same page             -->
        <!--         for a error message by a failure.              -->
        <!--      Further the page after a successfully login.      -->
        <!-- ====================================================== -->
        <form-login login-page="/login/login.zul"
                    always-use-default-target="false"
                    authentication-failure-url="/login/login.zul?errmes=login.error"
                    authentication-success-handler-ref="customRedirSuccessHandler"
                    default-target-url="/login/SelectBanque.zul"
                    login-processing-url="/login/j_spring_security_check"/>


        <!-- ====================================================== -->
        <!--        Tell Spring where it goes after logout.         -->
        <!--              logout-url is a action url.               -->
        <!-- ====================================================== -->
        <logout logout-url="/j_spring_security_logout" logout-success-url="/login/login.zul"/>

        <!-- ====================================================== -->
        <!--      Define the pages that are to be intercepted       -->
        <!--       It is parsed from top to bottom. Means that      -->
        <!--      the most specific pattern is standing on TOP      -->
        <!--            and the CATCH ALL is on BOTTOM!             -->
        <!-- ====================================================== -->
        <!-- <intercept-url pattern="/zk/**" access="IS_AUTHENTICATED_ANONYMOUSLY" /> -->
        <intercept-url pattern="/zuls/code/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/zuls/**" access="IS_AUTHENTICATED_REMEMBERED"/>
        <intercept-url pattern="/ext/**" access="IS_AUTHENTICATED_REMEMBERED"/>

        <!-- ====================================================== -->
        <!--      The root page is accessible by everyone but       -->
        <!--           internally spring makes a login and          -->
        <!--            this user becames a UserDetails             -->
        <!--       (in there are the ip-address and others)         -->
        <!-- ====================================================== -->
        <intercept-url pattern="/login/login.zul" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/login/SelectBanque.zul" access="IS_AUTHENTICATED_REMEMBERED"/>

        <!-- ====================================================== -->
        <!--                 Per user one session !!                -->
        <!--               In DEMO mode we set it to 5              -->
        <!-- 													    -->
        <!-- En ajoutant cette ligne, le nouvel utilisateur sera    -->
        <!-- bloqué à la connexion, sinon il éjectera l'autre user  -->
        <!--error-if-maximum-exceeded="true"                        -->
        <!-- ====================================================== -->
        <!--  tomcat 8 servlet 3.1 fix -->
        <session-management session-fixation-protection="migrateSession">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
        </session-management>

    </http>

    <!-- ====================================================== -->
    <!--     We define the kind of authentification with a      -->
    <!--           so called authentication-provider            -->
    <!--        We use the DAO authenticationProvider.          -->
    <!--     We coded out a custom UserDetailServiceImpl.       -->
    <!--     So we have our users stored in a DB we use         -->
    <!--     our own user-service class and point to her.       -->
    <!-- ====================================================== -->
    <authentication-manager>

		<!-- N.B. : L'ordre des authentication-provider est l'ordre dans lequel ils sont utilisés. 
		Si l'autentification échoue avec le premier on tente avec le 2ème puis le 3ème, etc. -->

		<!-- Authentification par LDAP -->
        <authentication-provider ref="ldapActiveDirectoryAuthProvider"/>

		<!-- Authentification par la base de données -->
        <authentication-provider user-service-ref="customUserDetailsService">
        	<password-encoder ref="passwordEncoder"/>
 <!--           <password-encoder hash="md5"/> -->
        </authentication-provider>
        
    </authentication-manager>

	<!-- Configuration du LDAP -->
    <beans:bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <beans:constructor-arg value="${activedirectory.url#ldap://127.0.0.1:389/dc=sls,dc=aphp,dc=fr}" />
        <beans:property name="userDn" value="${ldap.userdn#cn=admin,ou=Groupes et user applicatifs,dc=sls,dc=aphp,dc=fr}"/>
        <beans:property name="password" value="${ldap.password#*****}"/>
    </beans:bean>

	<beans:bean id="ldapActiveDirectoryAuthProvider" class="fr.aphp.tumorotek.action.CustomLdapProvider">
		<beans:constructor-arg>
            <beans:bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
                <beans:constructor-arg ref="contextSource"/>
                <beans:property name="userSearch">
                    <beans:bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
                        <beans:constructor-arg index="0" value=""/>
                        <beans:constructor-arg index="1" value="(sAMAccountName={0})"/>
                        <beans:constructor-arg index="2" ref="contextSource"/>
                        <beans:property name="searchSubtree" value="true"/>
                    </beans:bean>
                </beans:property>
            </beans:bean>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="tdrUserDetailsContextMapper" class="fr.aphp.tumorotek.action.UserDetailsContextMapperImpl"/>

    <!-- ====================================================== -->
    <!--           The Implementation of the Interface          -->
    <!--           UserDetailService for the logged in          -->
    <!--                    user and his rights                 -->
    <!-- ====================================================== -->
    <beans:bean id="customUserDetailsService" class="fr.aphp.tumorotek.action.MyUserDetailsService">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean>

    <!-- ====================================================== -->
    <!--          The Password Encoder who works in the         -->
    <!--             one-time-password mechanism.               -->
    <!-- ====================================================== -->
    <!-- <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"> -->
    <!-- </beans:bean> -->
    <beans:bean id="passwordEncoder" class="fr.aphp.tumorotek.encoder.Md5PasswordEncoder">
    </beans:bean>
    

    <!-- ====================================================== -->
    <!--         Here, only for showing in the console          -->
    <!--               that we can catches the events.          -->
    <!-- ====================================================== -->
    <!--	<zksp:zk-event login-template-close-delay="5">-->
    <!--		<zksp:intercept-event path="//**/btn_*" event="onClick"-->
    <!--			access="IS_AUTHENTICATED_REMEMBERED" />-->
    <!--		<zksp:intercept-event path="/**" event="onClick"-->
    <!--			access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
    <!---->
    <!--		<zksp:intercept-event path="//**/window_BranchesList/listBoxBranch"-->
    <!--			event="onClick" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
    <!--		<zksp:intercept-event path="//**/window_BranchesList/listBoxBranch"-->
    <!--			event="onDoubleClick" access="IS_AUTHENTICATED_REMEMBERED" />-->
    <!--	</zksp:zk-event>-->


    <!-- ====================================================== -->
    <!--       This ASPECT calls automatically the method       -->
    <!--      'loginLogging' which is for writing a log for     -->
    <!--        all successfully and failed logins, if a        -->
    <!--         method is called that handles the              -->
    <!--                     Authentication.                    -->
    <!-- ====================================================== -->
    <!-- <beans:bean id="LoginLoggingPolicyService"
        class="de.forsthaus.policy.LoginLoggingPolicyService">
        <beans:property name="guiLoginLoggingPolicService" ref="guiLoginLoggingPolicService" />
    </beans:bean>

    <aop:config>
        <aop:aspect id="LoginLoggingAspect" ref="LoginLoggingPolicyService">
            <aop:pointcut id="authPointcut"
                expression="execution(public org.springframework.security.core.Authentication org.springframework.security.authentication.AuthenticationProvider.authenticate(org.springframework.security.core.Authentication))" />
            <aop:around pointcut-ref="authPointcut" method="loginLogging" />
        </aop:aspect>
    </aop:config>-->

    <!-- ====================================================== -->
    <!--       Redirect Strategy				                -->
    <!-- ====================================================== -->
    <beans:bean id="customSuccessRedirStrategy"
                class="fr.aphp.tumorotek.action.CustomSuccessRedirection"/>

    <beans:bean id="customRedirSuccessHandler"
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
        <beans:property name="redirectStrategy" ref="customSuccessRedirStrategy"/>
    </beans:bean>
</beans:beans>